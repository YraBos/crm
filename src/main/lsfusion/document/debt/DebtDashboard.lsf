MODULE DebtDashboard;

REQUIRE DebtAgreement, Act, ActWord, DebtEvent;

NAMESPACE Contract;

actTemplate = DATA Template (Contract);
nameActTemplate 'Шаблон для акта' (Contract c) = name(actTemplate(c));

FORM dialogActTemplates 'Шаблоны Word'
    OBJECTS t = Template
    PROPERTIES (t) READONLY name, id
    FILTERS GROUP SUM 1 IF in(ActType c, t)
;

changeActTemplate (Contract c) {
    DIALOG dialogActTemplates OBJECTS t INPUT DO {
        actTemplate(c) <- t;
    }
}

EXTEND FORM contract PROPERTIES nameActTemplate(o) ON CHANGE changeActTemplate(o);

DESIGN contract {
    add {
        MOVE PROPERTY (nameActTemplate(o));
    }
}

created = DATA LOCAL BOOLEAN (Act);
text 'Значение' = DATA LOCAL TEXT (VARISTRING[100]);
in (VARISTRING[100] key) = GROUP SUM 1 IF required(TemplateEntry te) AND [GROUP SUM 1 IF created(Act a) BY actTemplate(contract(a))](template(te)) BY key(te);

createActFiles 'Сформировать' () {
    IF NOT (GROUP SUM 1 IF in(VARISTRING[100] key) AND NOT text(key)) THEN {
        FOR created(Act a) DO {
            createActTemplate(a, actTemplate(contract(a)));
            FOR in(VARISTRING[100] key) AND text(key) DO {
                value(TemplateEntry d) <- text(key) WHERE key(d) = key AND template(d) == actTemplate(contract(a));
            }
            process(actTemplate(contract(a)));
            NEW cf = DocumentFile {
                document(cf) <- a;
                file(cf) <- FILE (resultTemplate());
                dateTime(cf) <- currentDateTime();
                user(cf) <- currentUser();
            } 
        }
        APPLY;
        formOk();
    }
    ELSE MESSAGE 'Заполнены не все обязательные поля' NOWAIT;
}

FORM requiredTemplateEntries 'Обязательные поля'
    OBJECTS t = VARISTRING[100]
    PROPERTIES (t) 'Параметр' = VALUE READONLY, text
    FILTERS in(t)
    PROPERTIES createActFiles()
;

DESIGN requiredTemplateEntries {
    MOVE TOOLBARBOX {
        TOOLBARRIGHT {
            MOVE PROPERTY (createActFiles()) AFTER PROPERTY (formOk()) { alignment = STRETCH; }
            REMOVE PROPERTY (formOk());
            REMOVE PROPERTY (formApply());
            REMOVE PROPERTY (formCancel());
        }
    }
}

in 'Отм.' = DATA LOCAL BOOLEAN (Debt);

createActs 'Создать акты' () {

    LOCAL copy = BOOLEAN ();
    
    IF (GROUP SUM 1 IF in(Debt d) AND NOT act(d)) THEN NEWSESSION NESTED (in[Debt]) {
        
        ASK 'Скопировать текст и название?' DO {
            copy() <- TRUE;
        }
        //по соглашениям
        FOR [GROUP SUM 1 IF in(Debt d) AND NOT act(d) BY contract(d), agreement(d)](Contract c, Agreement ag) DO NEW a = Act {
            act(Debt d) <- a WHERE in(d) AND NOT act(d) AND contract(d) == c AND agreement(d) == ag;
            contract(a) <- c;
            agreement(a) <- ag;
            date(a) <- currentDate();
            sum(a) <- GROUP SUM sum(Debt d) IF in(d) AND act(d) == a;
            IF copy() THEN {
                name(a) <- OVERRIDE name(ag), name(c);
                text(a) <- OVERRIDE text(ag), text(c);
            }
            created(a) <- TRUE;
        }
        //без соглашения
        FOR [GROUP SUM 1 IF in(Debt d) AND NOT act(d) AND NOT agreement(d) BY contract(d)](Contract c) DO NEW a = Act {
            act(Debt d) <- a WHERE in(d) AND NOT act(d) AND contract(d) == c AND NOT agreement(d);
            contract(a) <- c;
            date(a) <- currentDate();
            sum(a) <- GROUP SUM sum(Debt d) IF in(d) AND act(d) == a;
            IF copy() THEN {
                name(a) <- name(c);
                text(a) <- text(c);
            }
            created(a) <- TRUE;
        }
        
        SHOW requiredTemplateEntries;
    }
}

editAct 'Редактировать акт' (Debt d) {
    NEWSESSION SHOW act OBJECTS o = act(d) DOCKED;
}

deleteAct 'Удалить акт' (Debt d) {
    NEWSESSION {
        DELETE Act a WHERE a == act(d);
        APPLY;
    }
} CONFIRM;

filterDebtContractType = DATA LOCAL ContractType();
nameDebtFilterContractType 'Тип договора' () = name(filterDebtContractType());

editContract 'Редактировать договор' (Debt d) {
    NEWSESSION SHOW contract OBJECTS o = contract(d) DOCKED;
}

addEvent 'Добавить' (Debt d) {
    NEWSESSION NEW e = Event {
        debt(e) <- d;
        SHOW event OBJECTS o = e DOCKED;
    }
} IMAGE 'add.png';

FORM debtDashboard 'Контроль задолженности'
    PROPERTIES nameDebtFilterContractType()
    OBJECTS d = Debt
    PROPERTIES in(d), createActs() DRAW d TOOLBAR
    PROPERTIES (d) TOOLBAR SHOWIF act(d) editAct, deleteAct 
    PROPERTIES (d) READONLY date, numberContract, nameContract, nameContractType, nameCustomer, nameLegalEntity, numberAgreement, numberAct, dateAct, 
                            shortNameCurrency, sumCurrency, sum, paid, note
    PROPERTIES (d) TOOLBAR editContract
    ORDER date(d)
    FILTERS  contractType(d) == filterDebtContractType() OR NOT filterDebtContractType()
    FILTERGROUP paid FILTER 'Не оплачено' NOT paid(d) >= sum(d) DEFAULT 
    
    OBJECTS e = Event
    PROPERTIES (e) READONLY id, name, nameType, nameEmployee, nameContact, date, time, dateNext, descriptionString, additionString
    PROPERTIES DRAW e TOOLBAR addEvent(d)
    PROPERTIES (e) NEWSESSION EDIT 
    FILTERS debt(e) == d
;

DESIGN debtDashboard {
    OBJECTS {
        NEW filter FIRST {
            caption = 'Фильтры';
            MOVE PROPERTY (nameDebtFilterContractType());
        }
    }
}

NAVIGATOR {
    dashboard {
        NEW debtDashboard;
    }
}