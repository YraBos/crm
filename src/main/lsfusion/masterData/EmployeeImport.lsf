MODULE EmployeeImport;

REQUIRE Employee;

NAMESPACE Contact;

employee (VARSTRING[15] id) = GROUP AGGR Employee e BY id(e);

importEmployees (FILE f) {
    
    LOCAL idEmployee = VARSTRING[15](INTEGER);
    LOCAL idLegalEntity = VARSTRING[15](INTEGER);
    LOCAL login = VARSTRING[50](INTEGER);
    LOCAL name = VARSTRING[100](INTEGER);
    LOCAL position = VARSTRING[100](INTEGER);
    LOCAL email = VARSTRING[100](INTEGER);
    LOCAL phone1 = VARSTRING[100](INTEGER);
    LOCAL phone2 = VARSTRING[30](INTEGER);
    LOCAL phone3 = VARSTRING[30](INTEGER);
    LOCAL phone4 = VARSTRING[30](INTEGER);
    LOCAL phone5 = VARSTRING[30](INTEGER);
    LOCAL phone6 = VARSTRING[30](INTEGER);
    LOCAL skype = VARSTRING[50](INTEGER);
    LOCAL note = VARSTRING[100](INTEGER);
    LOCAL message = VARSTRING[2000] ();
    LOCAL count = INTEGER ();
    
    message() <- '';
    count() <- 0;
    
    IMPORT XLS NOHEADER FROM f TO idEmployee, idLegalEntity, login, name, position, email, phone1, phone2, phone3, phone4, phone5, phone6, skype, note;
          
    FOR imported(INTEGER i) AND i > 0 AND trim(idLegalEntity(i)) != '' AND NOT isCompany(legalEntity(trim(idLegalEntity(i)))) DO {
    
        message() <- CONCAT ' ', message() + '\r\nстрока:', (i + 1), 'id:', idEmployee(i), 'Код организации:', idLegalEntity(i);
        count() <- count() + 1;
    }
    
    IF count() > 0 THEN {
        MESSAGE CONCAT ' ', 'Неимпортированные сотрудники, у которых организация не является компанией: ', count(), message();
    }
      
    FOR INTEGER i = [GROUP MIN INTEGER ii IF ii > 0 AND isCompany(legalEntity(trim(idLegalEntity(ii)))) BY trim(idEmployee(ii))](VARSTRING[15] id) AND id AND NOT employee(id) DO NEW c = Employee {
        id(c) <- id;
    }
    
    IF trim(phone2(0)) != '' AND NOT [GROUP SUM 1 BY name(PhoneType t)](trim(phone2(0))) THEN NEW t = PhoneType {
        name(t) <- trim(phone2(0));
    }
    IF trim(phone3(0)) != '' AND NOT [GROUP SUM 1 BY name(PhoneType t)](trim(phone3(0))) THEN NEW t = PhoneType {
        name(t) <- trim(phone3(0));
    }
    IF trim(phone4(0)) != '' AND NOT [GROUP SUM 1 BY name(PhoneType t)](trim(phone4(0))) THEN NEW t = PhoneType {
        name(t) <- trim(phone4(0));
    }
    IF trim(phone5(0)) != '' AND NOT [GROUP SUM 1 BY name(PhoneType t)](trim(phone5(0))) THEN NEW t = PhoneType {
        name(t) <- trim(phone5(0));
    }
    IF trim(phone6(0)) != '' AND NOT [GROUP SUM 1 BY name(PhoneType t)](trim(phone6(0))) THEN NEW t = PhoneType {
        name(t) <- trim(phone6(0));
    }
    
    FOR [GROUP SUM 1 BY trim(position(INTEGER i))](VARSTRING[100] pos) AND pos != '' AND NOT (GROUP MAX Position p IF name(p) == pos) DO NEW p = Position {
        name(p) <- pos;
    }
    
    FOR Employee c = employee(idEmployee(INTEGER i)) AND idEmployee(i) AND isCompany(legalEntity(trim(idLegalEntity(i)))) DO {
        legalEntity(c) <- legalEntity(trim(idLegalEntity(i)));
        login(c) <- trim(login(i)) IF trim(login(i)) != '';
        lastName(c) <- trim(name(i));
        position(c) <- GROUP MAX Position p IF upper(name(p)) == upper(trim(position(i)));
        email(c) <- trim(email(i));
        skype(c) <- trim(skype(i));
        note(c) <- trim(note(i));
        phone(c) <- trim(phone1(i));
        
        IF trim(phone2(i)) != '' AND NOT [GROUP SUM 1 BY contact(Phone p), number(p)](c, trim(phone2(i))) THEN NEW p = Phone {
            number(p) <- trim(phone2(i));
            type(p) <- GROUP MAX PhoneType t IF name(t) == trim(phone2(0));
            contact(p) <- c;
        }
        IF trim(phone3(i)) != '' AND NOT [GROUP SUM 1 BY contact(Phone p), number(p)](c, trim(phone3(i))) THEN NEW p = Phone {
            number(p) <- trim(phone3(i));
            type(p) <- GROUP MAX PhoneType t IF name(t) == trim(phone3(0));
            contact(p) <- c;
        }
        IF trim(phone4(i)) != '' AND NOT [GROUP SUM 1 BY contact(Phone p), number(p)](c, trim(phone4(i))) THEN NEW p = Phone {
            number(p) <- trim(phone4(i));
            type(p) <- GROUP MAX PhoneType t IF name(t) == trim(phone4(0));
            contact(p) <- c;
        }
        IF trim(phone5(i)) != '' AND NOT [GROUP SUM 1 BY contact(Phone p), number(p)](c, trim(phone5(i))) THEN NEW p = Phone {
            number(p) <- trim(phone5(i));
            type(p) <- GROUP MAX PhoneType t IF name(t) == trim(phone5(0));
            contact(p) <- c;
        }
        IF trim(phone6(i)) != '' AND NOT [GROUP SUM 1 BY contact(Phone p), number(p)](c, trim(phone6(i))) THEN NEW p = Phone {
            number(p) <- trim(phone6(i));
            type(p) <- GROUP MAX PhoneType t IF name(t) == trim(phone6(0));
            contact(p) <- c;
        }
    }
}

importEmployees 'Импорт сотрудников' () {
    NEWSESSION INPUT f = FILE DO { 
        importEmployees(f);
        APPLY;
    }
}

EXTEND FORM migrationData PROPERTIES() importEmployees;