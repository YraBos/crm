MODULE CustomerAttachmentImport;

REQUIRE CustomerAttachment, ContractImport, AgreementImport, ActImport, ContactImport, LegalEntityImport, EventImport, 
        EmployeeExpenseImport, PaymentImport, EmployeeAbsenceImport, EmployeeImport;

importAttachments 'Импорт договоров' (FILE f) {
    LOCAL idAttachment = VARSTRING[15](INTEGER);
    LOCAL idCustomer = VARSTRING[15](INTEGER);
    LOCAL number = VARSTRING[15](INTEGER);
    LOCAL date = DATE (INTEGER);
    LOCAL type = VARSTRING[100](INTEGER);
    LOCAL note = VARSTRING[250](INTEGER);
    LOCAL idEmployee = VARSTRING[15](INTEGER);
    LOCAL dateCreated = DATE (INTEGER);
    LOCAL message = VARSTRING[2000] ();
    LOCAL count = INTEGER ();

    message() <- '';
    count() <- 0;

    IMPORT XLS NOHEADER FROM f TO idAttachment, idCustomer, number, date, type, note, idEmployee, dateCreated;

    FOR imported(INTEGER i) AND i > 0 AND idAttachment(i) AND NOT customer(idCustomer(i)) DO {

        message() <- CONCAT ' ', message() + '\r\nстрока:', (i + 1), 'id:', idAttachment(i), 'Код клиента:', idCustomer(i);
        count() <- count() + 1;
    }

    IF count() > 0 THEN {
        MESSAGE CONCAT ' ', 'Неимпортированные документы, для которых не найден клиент: ', count(), message();
    }

    FOR [GROUP SUM 1 IF INTEGER i > 0 AND customer(idCustomer(i)) BY idAttachment(i)](VARSTRING[15] id) AND id != '' AND NOT attachment(id) DO NEW c = Attachment {
        id(c) <- id;
    }

    FOR [GROUP SUM 1 IF INTEGER i > 0 BY trim(type(i))](VARSTRING[50] type) AND type != '' 
        AND NOT (GROUP MAX AttachmentType t IF upper(name(t)) == upper(type)) DO NEW t = AttachmentType {

        name(t) <- type; 
    }
    
    FOR Attachment c = attachment(idAttachment(INTEGER i)) AND customer(idCustomer(i)) AND idAttachment(i) != '' AND i > 0 DO {
        
        customer(c) <- customer(idCustomer(i));
        number(c) <- trim(number(i));
        date(c) <- date(i);
        type(c) <- GROUP MAX AttachmentType t IF upper(name(t)) == upper(trim(type(i)));
        note(c) <- trim(note(i));
        createdUser(c) <- employee(idEmployee(i));
        createdDate(c) <- dateCreated(i);
    }
}

importAttachments 'Импорт документов клиентов' () {
    NEWSESSION INPUT f = FILE DO {
        importAttachments(f);
        APPLY;
    }
}

EXTEND FORM migrationData PROPERTIES() importAttachments;

importAttachmentDocumentsXls 'Импорт документов клиентов' () {

    NEWSESSION {
        LOCAL id = VARSTRING[15](INTEGER);
        LOCAL path = VARSTRING[250](INTEGER);
        LOCAL file = FILE();

        INPUT f = FILE DO {
            IMPORT XLS NOHEADER FROM f TO id, path;

            FOR Attachment c = attachment(id(INTEGER i)) AND id(i) AND i > 0 DO {
                TRY {
                    READ 'file://' + documentPath() + '/' + replace(upper(trim(path(i))), '\\', '/') TO file;
                    file(c) <- file();
                }
            }
        }
        APPLY;
    }
}

EXTEND FORM migrationData PROPERTIES() importAttachmentDocumentsXls;

DESIGN migrationData {
    NEW importData FIRST {
        caption = 'Импорт';
        type = COLUMNS;
        columns = 3;
        MOVE PROPERTY (importContracts());
        MOVE PROPERTY (importAgreements());
        MOVE PROPERTY (importActs());
        MOVE PROPERTY (importLegalEntities());
        MOVE PROPERTY (importContacts());
        MOVE PROPERTY (importEmployees());
        MOVE PROPERTY (importEmployeeExpense());
        MOVE PROPERTY (importEmployeeAbsences());
        MOVE PROPERTY (importEvents());
        MOVE PROPERTY (importPayments());
        MOVE PROPERTY (importPaymentContracts());
        MOVE PROPERTY (importAttachments());
    }
    NEW documents AFTER importData {
        caption = 'Импорт документов';
        MOVE PROPERTY (documentPath());
        NEW importDocuments {
            type = COLUMNS;
            columns = 2;
            MOVE PROPERTY (importContractDocumentsXls());
            MOVE PROPERTY (importAgreementDocumentsXls());
            MOVE PROPERTY (importActDocumentsXls());
            MOVE PROPERTY (importAttachmentDocumentsXls());
        }
    }
}