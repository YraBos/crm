MODULE ContactImport;

REQUIRE Contact, Employee;

NAMESPACE Contact;

importContacts (FILE f) {
    
    LOCAL idContact = STRING[15](INTEGER);
    LOCAL idCustomer = STRING[15](INTEGER);
    LOCAL idLegalEntity = STRING[15](INTEGER);
    LOCAL name1 = STRING[100](INTEGER);
    LOCAL name2 = STRING[100](INTEGER);
    LOCAL name3 = STRING[100](INTEGER);
    LOCAL position = STRING[100](INTEGER);
    LOCAL email = STRING[100](INTEGER);
    LOCAL phone1 = STRING[100](INTEGER);
    LOCAL phone2 = STRING[30](INTEGER);
    LOCAL phone3 = STRING[30](INTEGER);
    LOCAL phone4 = STRING[30](INTEGER);
    LOCAL phone5 = STRING[30](INTEGER);
    LOCAL phone6 = STRING[30](INTEGER);
    LOCAL skype = STRING[50](INTEGER);
    LOCAL note = STRING[100](INTEGER);
    LOCAL authorised = ISTRING[1000](INTEGER);
    
    IMPORT XLS NOHEADER FROM f TO idContact = B, idCustomer, idLegalEntity, name1, name2, name3, position, email, skype, 
                                  note, authorised, phone1, phone2, phone3, phone4, phone5, phone6;

    FOR INTEGER i = [GROUP MIN INTEGER ii IF ii > 1 BY trim(idContact(ii))](STRING[15] id) AND id AND NOT contact(id) AND customer(trim(idCustomer(i))) DO NEW c = Contact {
        id(c) <- id;
    }
    
    IF trim(phone2(1)) != '' AND NOT [GROUP SUM 1 BY name(PhoneType t)](trim(phone2(1))) THEN NEW t = PhoneType {
        name(t) <- trim(phone2(1));
    }
    IF trim(phone3(1)) != '' AND NOT [GROUP SUM 1 BY name(PhoneType t)](trim(phone3(1))) THEN NEW t = PhoneType {
        name(t) <- trim(phone3(1));
    }
    IF trim(phone4(1)) != '' AND NOT [GROUP SUM 1 BY name(PhoneType t)](trim(phone4(1))) THEN NEW t = PhoneType {
        name(t) <- trim(phone4(1));
    }
    IF trim(phone5(1)) != '' AND NOT [GROUP SUM 1 BY name(PhoneType t)](trim(phone5(1))) THEN NEW t = PhoneType {
        name(t) <- trim(phone5(1));
    }
    IF trim(phone6(1)) != '' AND NOT [GROUP SUM 1 BY name(PhoneType t)](trim(phone6(1))) THEN NEW t = PhoneType {
        name(t) <- trim(phone6(1));
    }
    
    FOR [GROUP SUM 1 BY trim(position(INTEGER i))](STRING[100] pos) AND pos != '' AND NOT (GROUP MAX Position p IF name(p) == pos) DO NEW p = Position {
        name(p) <- pos;
    }
    
    FOR Contact c = contact(idContact(INTEGER i)) AND idContact(i) DO {
        legalEntity(c) <- legalEntity(trim(idLegalEntity(i)));
        customer(c) <- OVERRIDE customer(legalEntity(trim(idLegalEntity(i)))), customer(trim(idCustomer(i)));
        lastName(c) <- trim(name1(i));
        firstName(c) <- trim(name2(i));
        middleName(c) <- trim(name3(i));
        position(c) <- GROUP MAX Position p IF upper(name(p)) == upper(trim(position(i)));
        email(c) <- trim(email(i));
        skype(c) <- trim(skype(i));
        note(c) <- trim(note(i));
        authorisedDocument(c) <- trim(authorised(i));
        phone(c) <- trim(phone1(i));
        
        IF trim(phone2(i)) != '' AND NOT [GROUP SUM 1 BY contact(Phone p), number(p)](c, trim(phone2(i))) THEN NEW p = Phone {
            number(p) <- trim(phone2(i));
            type(p) <- GROUP MAX PhoneType t IF name(t) == trim(phone2(1));
            contact(p) <- c;
        }
        IF trim(phone3(i)) != '' AND NOT [GROUP SUM 1 BY contact(Phone p), number(p)](c, trim(phone3(i))) THEN NEW p = Phone {
            number(p) <- trim(phone3(i));
            type(p) <- GROUP MAX PhoneType t IF name(t) == trim(phone3(1));
            contact(p) <- c;
        }
        IF trim(phone4(i)) != '' AND NOT [GROUP SUM 1 BY contact(Phone p), number(p)](c, trim(phone4(i))) THEN NEW p = Phone {
            number(p) <- trim(phone4(i));
            type(p) <- GROUP MAX PhoneType t IF name(t) == trim(phone4(1));
            contact(p) <- c;
        }
        IF trim(phone5(i)) != '' AND NOT [GROUP SUM 1 BY contact(Phone p), number(p)](c, trim(phone5(i))) THEN NEW p = Phone {
            number(p) <- trim(phone5(i));
            type(p) <- GROUP MAX PhoneType t IF name(t) == trim(phone5(1));
            contact(p) <- c;
        }
        IF trim(phone6(i)) != '' AND NOT [GROUP SUM 1 BY contact(Phone p), number(p)](c, trim(phone6(i))) THEN NEW p = Phone {
            number(p) <- trim(phone6(i));
            type(p) <- GROUP MAX PhoneType t IF name(t) == trim(phone6(1));
            contact(p) <- c;
        }
    }
}

importContacts 'Импорт контактов' () {
    NEWSESSION INPUT f = FILE DO { 
        importContacts(f);
        APPLY;
    }
}

FORM exportContacts 'Экспорт контактов'
    
    OBJECTS t = PhoneType
    OBJECTS c = Contact
    PROPERTIES (c) id, idCustomer, idLegalEntity, lastName, firstName, middleName, namePosition, email, skype, note, authorisedDocument, phone
    PROPERTIES number(c, t) COLUMNS (t) HEADER name(t)
    ORDERS lastName(c)  
;

exportContacts 'Экспорт контактов' () {
    
    LOCAL file = FILE();
    
    PRINT exportContacts XLS TO file;
    WRITE CLIENT DIALOG file() TO 'Контакты';
    open(file(), 'Контакты');
}

EXTEND FORM migrationData PROPERTIES() exportContacts, importContacts;